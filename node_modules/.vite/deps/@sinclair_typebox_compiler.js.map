{
  "version": 3,
  "sources": ["../../@sinclair/typebox/system/system.js", "../../@sinclair/typebox/system/index.js", "../../@sinclair/typebox/value/hash.js", "../../@sinclair/typebox/errors/errors.js", "../../@sinclair/typebox/errors/index.js", "../../@sinclair/typebox/compiler/compiler.js", "../../@sinclair/typebox/compiler/index.js"],
  "sourcesContent": ["\"use strict\";\n/*--------------------------------------------------------------------------\n\n@sinclair/typebox/system\n\nThe MIT License (MIT)\n\nCopyright (c) 2017-2023 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TypeSystem = exports.TypeSystemDuplicateFormat = exports.TypeSystemDuplicateTypeKind = void 0;\nconst Types = require(\"../typebox\");\nclass TypeSystemDuplicateTypeKind extends Error {\n    constructor(kind) {\n        super(`Duplicate type kind '${kind}' detected`);\n    }\n}\nexports.TypeSystemDuplicateTypeKind = TypeSystemDuplicateTypeKind;\nclass TypeSystemDuplicateFormat extends Error {\n    constructor(kind) {\n        super(`Duplicate string format '${kind}' detected`);\n    }\n}\nexports.TypeSystemDuplicateFormat = TypeSystemDuplicateFormat;\n/** Creates user defined types and formats and provides overrides for value checking behaviours */\nvar TypeSystem;\n(function (TypeSystem) {\n    // ------------------------------------------------------------------------\n    // Assertion Policies\n    // ------------------------------------------------------------------------\n    /** Sets whether TypeBox should assert optional properties using the TypeScript `exactOptionalPropertyTypes` assertion policy. The default is `false` */\n    TypeSystem.ExactOptionalPropertyTypes = false;\n    /** Sets whether arrays should be treated as a kind of objects. The default is `false` */\n    TypeSystem.AllowArrayObjects = false;\n    /** Sets whether `NaN` or `Infinity` should be treated as valid numeric values. The default is `false` */\n    TypeSystem.AllowNaN = false;\n    /** Sets whether `null` should validate for void types. The default is `false` */\n    TypeSystem.AllowVoidNull = false;\n    // ------------------------------------------------------------------------\n    // String Formats and Types\n    // ------------------------------------------------------------------------\n    /** Creates a new type */\n    function Type(kind, check) {\n        if (Types.TypeRegistry.Has(kind))\n            throw new TypeSystemDuplicateTypeKind(kind);\n        Types.TypeRegistry.Set(kind, check);\n        return (options = {}) => Types.Type.Unsafe({ ...options, [Types.Kind]: kind });\n    }\n    TypeSystem.Type = Type;\n    /** Creates a new string format */\n    function Format(format, check) {\n        if (Types.FormatRegistry.Has(format))\n            throw new TypeSystemDuplicateFormat(format);\n        Types.FormatRegistry.Set(format, check);\n        return format;\n    }\n    TypeSystem.Format = Format;\n    // ------------------------------------------------------------------------\n    // Deprecated\n    // ------------------------------------------------------------------------\n    /** @deprecated Use `TypeSystem.Type()` instead. */\n    function CreateType(kind, check) {\n        return Type(kind, check);\n    }\n    TypeSystem.CreateType = CreateType;\n    /** @deprecated Use `TypeSystem.Format()` instead.  */\n    function CreateFormat(format, check) {\n        return Format(format, check);\n    }\n    TypeSystem.CreateFormat = CreateFormat;\n})(TypeSystem = exports.TypeSystem || (exports.TypeSystem = {}));\n", "\"use strict\";\n/*--------------------------------------------------------------------------\n\n@sinclair/typebox/system\n\nThe MIT License (MIT)\n\nCopyright (c) 2017-2023 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./system\"), exports);\n", "\"use strict\";\n/*--------------------------------------------------------------------------\n\n@sinclair/typebox/hash\n\nThe MIT License (MIT)\n\nCopyright (c) 2017-2023 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ValueHash = exports.ValueHashError = void 0;\nclass ValueHashError extends Error {\n    constructor(value) {\n        super(`Hash: Unable to hash value`);\n        this.value = value;\n    }\n}\nexports.ValueHashError = ValueHashError;\nvar ValueHash;\n(function (ValueHash) {\n    let ByteMarker;\n    (function (ByteMarker) {\n        ByteMarker[ByteMarker[\"Undefined\"] = 0] = \"Undefined\";\n        ByteMarker[ByteMarker[\"Null\"] = 1] = \"Null\";\n        ByteMarker[ByteMarker[\"Boolean\"] = 2] = \"Boolean\";\n        ByteMarker[ByteMarker[\"Number\"] = 3] = \"Number\";\n        ByteMarker[ByteMarker[\"String\"] = 4] = \"String\";\n        ByteMarker[ByteMarker[\"Object\"] = 5] = \"Object\";\n        ByteMarker[ByteMarker[\"Array\"] = 6] = \"Array\";\n        ByteMarker[ByteMarker[\"Date\"] = 7] = \"Date\";\n        ByteMarker[ByteMarker[\"Uint8Array\"] = 8] = \"Uint8Array\";\n        ByteMarker[ByteMarker[\"Symbol\"] = 9] = \"Symbol\";\n        ByteMarker[ByteMarker[\"BigInt\"] = 10] = \"BigInt\";\n    })(ByteMarker || (ByteMarker = {}));\n    // ----------------------------------------------------\n    // State\n    // ----------------------------------------------------\n    let Hash = globalThis.BigInt('14695981039346656037');\n    const [Prime, Size] = [globalThis.BigInt('1099511628211'), globalThis.BigInt('2') ** globalThis.BigInt('64')];\n    const Bytes = globalThis.Array.from({ length: 256 }).map((_, i) => globalThis.BigInt(i));\n    const F64 = new globalThis.Float64Array(1);\n    const F64In = new globalThis.DataView(F64.buffer);\n    const F64Out = new globalThis.Uint8Array(F64.buffer);\n    // ----------------------------------------------------\n    // Guards\n    // ----------------------------------------------------\n    function IsDate(value) {\n        return value instanceof globalThis.Date;\n    }\n    function IsUint8Array(value) {\n        return value instanceof globalThis.Uint8Array;\n    }\n    function IsArray(value) {\n        return globalThis.Array.isArray(value);\n    }\n    function IsBoolean(value) {\n        return typeof value === 'boolean';\n    }\n    function IsNull(value) {\n        return value === null;\n    }\n    function IsNumber(value) {\n        return typeof value === 'number';\n    }\n    function IsSymbol(value) {\n        return typeof value === 'symbol';\n    }\n    function IsBigInt(value) {\n        return typeof value === 'bigint';\n    }\n    function IsObject(value) {\n        return typeof value === 'object' && value !== null && !IsArray(value) && !IsDate(value) && !IsUint8Array(value);\n    }\n    function IsString(value) {\n        return typeof value === 'string';\n    }\n    function IsUndefined(value) {\n        return value === undefined;\n    }\n    // ----------------------------------------------------\n    // Encoding\n    // ----------------------------------------------------\n    function Array(value) {\n        FNV1A64(ByteMarker.Array);\n        for (const item of value) {\n            Visit(item);\n        }\n    }\n    function Boolean(value) {\n        FNV1A64(ByteMarker.Boolean);\n        FNV1A64(value ? 1 : 0);\n    }\n    function BigInt(value) {\n        FNV1A64(ByteMarker.BigInt);\n        F64In.setBigInt64(0, value);\n        for (const byte of F64Out) {\n            FNV1A64(byte);\n        }\n    }\n    function Date(value) {\n        FNV1A64(ByteMarker.Date);\n        Visit(value.getTime());\n    }\n    function Null(value) {\n        FNV1A64(ByteMarker.Null);\n    }\n    function Number(value) {\n        FNV1A64(ByteMarker.Number);\n        F64In.setFloat64(0, value);\n        for (const byte of F64Out) {\n            FNV1A64(byte);\n        }\n    }\n    function Object(value) {\n        FNV1A64(ByteMarker.Object);\n        for (const key of globalThis.Object.keys(value).sort()) {\n            Visit(key);\n            Visit(value[key]);\n        }\n    }\n    function String(value) {\n        FNV1A64(ByteMarker.String);\n        for (let i = 0; i < value.length; i++) {\n            FNV1A64(value.charCodeAt(i));\n        }\n    }\n    function Symbol(value) {\n        FNV1A64(ByteMarker.Symbol);\n        Visit(value.description);\n    }\n    function Uint8Array(value) {\n        FNV1A64(ByteMarker.Uint8Array);\n        for (let i = 0; i < value.length; i++) {\n            FNV1A64(value[i]);\n        }\n    }\n    function Undefined(value) {\n        return FNV1A64(ByteMarker.Undefined);\n    }\n    function Visit(value) {\n        if (IsArray(value)) {\n            Array(value);\n        }\n        else if (IsBoolean(value)) {\n            Boolean(value);\n        }\n        else if (IsBigInt(value)) {\n            BigInt(value);\n        }\n        else if (IsDate(value)) {\n            Date(value);\n        }\n        else if (IsNull(value)) {\n            Null(value);\n        }\n        else if (IsNumber(value)) {\n            Number(value);\n        }\n        else if (IsObject(value)) {\n            Object(value);\n        }\n        else if (IsString(value)) {\n            String(value);\n        }\n        else if (IsSymbol(value)) {\n            Symbol(value);\n        }\n        else if (IsUint8Array(value)) {\n            Uint8Array(value);\n        }\n        else if (IsUndefined(value)) {\n            Undefined(value);\n        }\n        else {\n            throw new ValueHashError(value);\n        }\n    }\n    function FNV1A64(byte) {\n        Hash = Hash ^ Bytes[byte];\n        Hash = (Hash * Prime) % Size;\n    }\n    /** Creates a FNV1A-64 non cryptographic hash of the given value */\n    function Create(value) {\n        Hash = globalThis.BigInt('14695981039346656037');\n        Visit(value);\n        return Hash;\n    }\n    ValueHash.Create = Create;\n})(ValueHash = exports.ValueHash || (exports.ValueHash = {}));\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ValueErrors = exports.ValueErrorsDereferenceError = exports.ValueErrorsUnknownTypeError = exports.ValueErrorIterator = exports.ValueErrorType = void 0;\n/*--------------------------------------------------------------------------\n\n@sinclair/typebox/errors\n\nThe MIT License (MIT)\n\nCopyright (c) 2017-2023 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nconst Types = require(\"../typebox\");\nconst index_1 = require(\"../system/index\");\nconst hash_1 = require(\"../value/hash\");\n// -------------------------------------------------------------------\n// ValueErrorType\n// -------------------------------------------------------------------\nvar ValueErrorType;\n(function (ValueErrorType) {\n    ValueErrorType[ValueErrorType[\"Array\"] = 0] = \"Array\";\n    ValueErrorType[ValueErrorType[\"ArrayMinItems\"] = 1] = \"ArrayMinItems\";\n    ValueErrorType[ValueErrorType[\"ArrayMaxItems\"] = 2] = \"ArrayMaxItems\";\n    ValueErrorType[ValueErrorType[\"ArrayUniqueItems\"] = 3] = \"ArrayUniqueItems\";\n    ValueErrorType[ValueErrorType[\"BigInt\"] = 4] = \"BigInt\";\n    ValueErrorType[ValueErrorType[\"BigIntMultipleOf\"] = 5] = \"BigIntMultipleOf\";\n    ValueErrorType[ValueErrorType[\"BigIntExclusiveMinimum\"] = 6] = \"BigIntExclusiveMinimum\";\n    ValueErrorType[ValueErrorType[\"BigIntExclusiveMaximum\"] = 7] = \"BigIntExclusiveMaximum\";\n    ValueErrorType[ValueErrorType[\"BigIntMinimum\"] = 8] = \"BigIntMinimum\";\n    ValueErrorType[ValueErrorType[\"BigIntMaximum\"] = 9] = \"BigIntMaximum\";\n    ValueErrorType[ValueErrorType[\"Boolean\"] = 10] = \"Boolean\";\n    ValueErrorType[ValueErrorType[\"Date\"] = 11] = \"Date\";\n    ValueErrorType[ValueErrorType[\"DateExclusiveMinimumTimestamp\"] = 12] = \"DateExclusiveMinimumTimestamp\";\n    ValueErrorType[ValueErrorType[\"DateExclusiveMaximumTimestamp\"] = 13] = \"DateExclusiveMaximumTimestamp\";\n    ValueErrorType[ValueErrorType[\"DateMinimumTimestamp\"] = 14] = \"DateMinimumTimestamp\";\n    ValueErrorType[ValueErrorType[\"DateMaximumTimestamp\"] = 15] = \"DateMaximumTimestamp\";\n    ValueErrorType[ValueErrorType[\"Function\"] = 16] = \"Function\";\n    ValueErrorType[ValueErrorType[\"Integer\"] = 17] = \"Integer\";\n    ValueErrorType[ValueErrorType[\"IntegerMultipleOf\"] = 18] = \"IntegerMultipleOf\";\n    ValueErrorType[ValueErrorType[\"IntegerExclusiveMinimum\"] = 19] = \"IntegerExclusiveMinimum\";\n    ValueErrorType[ValueErrorType[\"IntegerExclusiveMaximum\"] = 20] = \"IntegerExclusiveMaximum\";\n    ValueErrorType[ValueErrorType[\"IntegerMinimum\"] = 21] = \"IntegerMinimum\";\n    ValueErrorType[ValueErrorType[\"IntegerMaximum\"] = 22] = \"IntegerMaximum\";\n    ValueErrorType[ValueErrorType[\"Intersect\"] = 23] = \"Intersect\";\n    ValueErrorType[ValueErrorType[\"IntersectUnevaluatedProperties\"] = 24] = \"IntersectUnevaluatedProperties\";\n    ValueErrorType[ValueErrorType[\"Literal\"] = 25] = \"Literal\";\n    ValueErrorType[ValueErrorType[\"Never\"] = 26] = \"Never\";\n    ValueErrorType[ValueErrorType[\"Not\"] = 27] = \"Not\";\n    ValueErrorType[ValueErrorType[\"Null\"] = 28] = \"Null\";\n    ValueErrorType[ValueErrorType[\"Number\"] = 29] = \"Number\";\n    ValueErrorType[ValueErrorType[\"NumberMultipleOf\"] = 30] = \"NumberMultipleOf\";\n    ValueErrorType[ValueErrorType[\"NumberExclusiveMinimum\"] = 31] = \"NumberExclusiveMinimum\";\n    ValueErrorType[ValueErrorType[\"NumberExclusiveMaximum\"] = 32] = \"NumberExclusiveMaximum\";\n    ValueErrorType[ValueErrorType[\"NumberMinumum\"] = 33] = \"NumberMinumum\";\n    ValueErrorType[ValueErrorType[\"NumberMaximum\"] = 34] = \"NumberMaximum\";\n    ValueErrorType[ValueErrorType[\"Object\"] = 35] = \"Object\";\n    ValueErrorType[ValueErrorType[\"ObjectMinProperties\"] = 36] = \"ObjectMinProperties\";\n    ValueErrorType[ValueErrorType[\"ObjectMaxProperties\"] = 37] = \"ObjectMaxProperties\";\n    ValueErrorType[ValueErrorType[\"ObjectAdditionalProperties\"] = 38] = \"ObjectAdditionalProperties\";\n    ValueErrorType[ValueErrorType[\"ObjectRequiredProperties\"] = 39] = \"ObjectRequiredProperties\";\n    ValueErrorType[ValueErrorType[\"Promise\"] = 40] = \"Promise\";\n    ValueErrorType[ValueErrorType[\"RecordKeyNumeric\"] = 41] = \"RecordKeyNumeric\";\n    ValueErrorType[ValueErrorType[\"RecordKeyString\"] = 42] = \"RecordKeyString\";\n    ValueErrorType[ValueErrorType[\"String\"] = 43] = \"String\";\n    ValueErrorType[ValueErrorType[\"StringMinLength\"] = 44] = \"StringMinLength\";\n    ValueErrorType[ValueErrorType[\"StringMaxLength\"] = 45] = \"StringMaxLength\";\n    ValueErrorType[ValueErrorType[\"StringPattern\"] = 46] = \"StringPattern\";\n    ValueErrorType[ValueErrorType[\"StringFormatUnknown\"] = 47] = \"StringFormatUnknown\";\n    ValueErrorType[ValueErrorType[\"StringFormat\"] = 48] = \"StringFormat\";\n    ValueErrorType[ValueErrorType[\"Symbol\"] = 49] = \"Symbol\";\n    ValueErrorType[ValueErrorType[\"TupleZeroLength\"] = 50] = \"TupleZeroLength\";\n    ValueErrorType[ValueErrorType[\"TupleLength\"] = 51] = \"TupleLength\";\n    ValueErrorType[ValueErrorType[\"Undefined\"] = 52] = \"Undefined\";\n    ValueErrorType[ValueErrorType[\"Union\"] = 53] = \"Union\";\n    ValueErrorType[ValueErrorType[\"Uint8Array\"] = 54] = \"Uint8Array\";\n    ValueErrorType[ValueErrorType[\"Uint8ArrayMinByteLength\"] = 55] = \"Uint8ArrayMinByteLength\";\n    ValueErrorType[ValueErrorType[\"Uint8ArrayMaxByteLength\"] = 56] = \"Uint8ArrayMaxByteLength\";\n    ValueErrorType[ValueErrorType[\"Void\"] = 57] = \"Void\";\n    ValueErrorType[ValueErrorType[\"Custom\"] = 58] = \"Custom\";\n})(ValueErrorType = exports.ValueErrorType || (exports.ValueErrorType = {}));\n// -------------------------------------------------------------------\n// ValueErrorIterator\n// -------------------------------------------------------------------\nclass ValueErrorIterator {\n    constructor(iterator) {\n        this.iterator = iterator;\n    }\n    [Symbol.iterator]() {\n        return this.iterator;\n    }\n    /** Returns the first value error or undefined if no errors */\n    First() {\n        const next = this.iterator.next();\n        return next.done ? undefined : next.value;\n    }\n}\nexports.ValueErrorIterator = ValueErrorIterator;\n// -------------------------------------------------------------------\n// ValueErrors\n// -------------------------------------------------------------------\nclass ValueErrorsUnknownTypeError extends Error {\n    constructor(schema) {\n        super('ValueErrors: Unknown type');\n        this.schema = schema;\n    }\n}\nexports.ValueErrorsUnknownTypeError = ValueErrorsUnknownTypeError;\nclass ValueErrorsDereferenceError extends Error {\n    constructor(schema) {\n        super(`ValueErrors: Unable to dereference schema with $id '${schema.$ref}'`);\n        this.schema = schema;\n    }\n}\nexports.ValueErrorsDereferenceError = ValueErrorsDereferenceError;\n/** Provides functionality to generate a sequence of errors against a TypeBox type.  */\nvar ValueErrors;\n(function (ValueErrors) {\n    // ----------------------------------------------------------------------\n    // Guards\n    // ----------------------------------------------------------------------\n    function IsBigInt(value) {\n        return typeof value === 'bigint';\n    }\n    function IsInteger(value) {\n        return globalThis.Number.isInteger(value);\n    }\n    function IsString(value) {\n        return typeof value === 'string';\n    }\n    function IsDefined(value) {\n        return value !== undefined;\n    }\n    // ----------------------------------------------------------------------\n    // Policies\n    // ----------------------------------------------------------------------\n    function IsExactOptionalProperty(value, key) {\n        return index_1.TypeSystem.ExactOptionalPropertyTypes ? key in value : value[key] !== undefined;\n    }\n    function IsObject(value) {\n        const result = typeof value === 'object' && value !== null;\n        return index_1.TypeSystem.AllowArrayObjects ? result : result && !globalThis.Array.isArray(value);\n    }\n    function IsRecordObject(value) {\n        return IsObject(value) && !(value instanceof globalThis.Date) && !(value instanceof globalThis.Uint8Array);\n    }\n    function IsNumber(value) {\n        const result = typeof value === 'number';\n        return index_1.TypeSystem.AllowNaN ? result : result && globalThis.Number.isFinite(value);\n    }\n    function IsVoid(value) {\n        const result = value === undefined;\n        return index_1.TypeSystem.AllowVoidNull ? result || value === null : result;\n    }\n    // ----------------------------------------------------------------------\n    // Types\n    // ----------------------------------------------------------------------\n    function* Any(schema, references, path, value) { }\n    function* Array(schema, references, path, value) {\n        if (!globalThis.Array.isArray(value)) {\n            return yield { type: ValueErrorType.Array, schema, path, value, message: `Expected array` };\n        }\n        if (IsDefined(schema.minItems) && !(value.length >= schema.minItems)) {\n            yield { type: ValueErrorType.ArrayMinItems, schema, path, value, message: `Expected array length to be greater or equal to ${schema.minItems}` };\n        }\n        if (IsDefined(schema.maxItems) && !(value.length <= schema.maxItems)) {\n            yield { type: ValueErrorType.ArrayMinItems, schema, path, value, message: `Expected array length to be less or equal to ${schema.maxItems}` };\n        }\n        // prettier-ignore\n        if (schema.uniqueItems === true && !((function () { const set = new Set(); for (const element of value) {\n            const hashed = hash_1.ValueHash.Create(element);\n            if (set.has(hashed)) {\n                return false;\n            }\n            else {\n                set.add(hashed);\n            }\n        } return true; })())) {\n            yield { type: ValueErrorType.ArrayUniqueItems, schema, path, value, message: `Expected array elements to be unique` };\n        }\n        for (let i = 0; i < value.length; i++) {\n            yield* Visit(schema.items, references, `${path}/${i}`, value[i]);\n        }\n    }\n    function* BigInt(schema, references, path, value) {\n        if (!IsBigInt(value)) {\n            return yield { type: ValueErrorType.BigInt, schema, path, value, message: `Expected bigint` };\n        }\n        if (IsDefined(schema.multipleOf) && !(value % schema.multipleOf === globalThis.BigInt(0))) {\n            yield { type: ValueErrorType.BigIntMultipleOf, schema, path, value, message: `Expected bigint to be a multiple of ${schema.multipleOf}` };\n        }\n        if (IsDefined(schema.exclusiveMinimum) && !(value > schema.exclusiveMinimum)) {\n            yield { type: ValueErrorType.BigIntExclusiveMinimum, schema, path, value, message: `Expected bigint to be greater than ${schema.exclusiveMinimum}` };\n        }\n        if (IsDefined(schema.exclusiveMaximum) && !(value < schema.exclusiveMaximum)) {\n            yield { type: ValueErrorType.BigIntExclusiveMaximum, schema, path, value, message: `Expected bigint to be less than ${schema.exclusiveMaximum}` };\n        }\n        if (IsDefined(schema.minimum) && !(value >= schema.minimum)) {\n            yield { type: ValueErrorType.BigIntMinimum, schema, path, value, message: `Expected bigint to be greater or equal to ${schema.minimum}` };\n        }\n        if (IsDefined(schema.maximum) && !(value <= schema.maximum)) {\n            yield { type: ValueErrorType.BigIntMaximum, schema, path, value, message: `Expected bigint to be less or equal to ${schema.maximum}` };\n        }\n    }\n    function* Boolean(schema, references, path, value) {\n        if (!(typeof value === 'boolean')) {\n            return yield { type: ValueErrorType.Boolean, schema, path, value, message: `Expected boolean` };\n        }\n    }\n    function* Constructor(schema, references, path, value) {\n        yield* Visit(schema.returns, references, path, value.prototype);\n    }\n    function* Date(schema, references, path, value) {\n        if (!(value instanceof globalThis.Date)) {\n            return yield { type: ValueErrorType.Date, schema, path, value, message: `Expected Date object` };\n        }\n        if (!globalThis.isFinite(value.getTime())) {\n            return yield { type: ValueErrorType.Date, schema, path, value, message: `Invalid Date` };\n        }\n        if (IsDefined(schema.exclusiveMinimumTimestamp) && !(value.getTime() > schema.exclusiveMinimumTimestamp)) {\n            yield { type: ValueErrorType.DateExclusiveMinimumTimestamp, schema, path, value, message: `Expected Date timestamp to be greater than ${schema.exclusiveMinimum}` };\n        }\n        if (IsDefined(schema.exclusiveMaximumTimestamp) && !(value.getTime() < schema.exclusiveMaximumTimestamp)) {\n            yield { type: ValueErrorType.DateExclusiveMaximumTimestamp, schema, path, value, message: `Expected Date timestamp to be less than ${schema.exclusiveMaximum}` };\n        }\n        if (IsDefined(schema.minimumTimestamp) && !(value.getTime() >= schema.minimumTimestamp)) {\n            yield { type: ValueErrorType.DateMinimumTimestamp, schema, path, value, message: `Expected Date timestamp to be greater or equal to ${schema.minimum}` };\n        }\n        if (IsDefined(schema.maximumTimestamp) && !(value.getTime() <= schema.maximumTimestamp)) {\n            yield { type: ValueErrorType.DateMaximumTimestamp, schema, path, value, message: `Expected Date timestamp to be less or equal to ${schema.maximum}` };\n        }\n    }\n    function* Function(schema, references, path, value) {\n        if (!(typeof value === 'function')) {\n            return yield { type: ValueErrorType.Function, schema, path, value, message: `Expected function` };\n        }\n    }\n    function* Integer(schema, references, path, value) {\n        if (!IsInteger(value)) {\n            return yield { type: ValueErrorType.Integer, schema, path, value, message: `Expected integer` };\n        }\n        if (IsDefined(schema.multipleOf) && !(value % schema.multipleOf === 0)) {\n            yield { type: ValueErrorType.IntegerMultipleOf, schema, path, value, message: `Expected integer to be a multiple of ${schema.multipleOf}` };\n        }\n        if (IsDefined(schema.exclusiveMinimum) && !(value > schema.exclusiveMinimum)) {\n            yield { type: ValueErrorType.IntegerExclusiveMinimum, schema, path, value, message: `Expected integer to be greater than ${schema.exclusiveMinimum}` };\n        }\n        if (IsDefined(schema.exclusiveMaximum) && !(value < schema.exclusiveMaximum)) {\n            yield { type: ValueErrorType.IntegerExclusiveMaximum, schema, path, value, message: `Expected integer to be less than ${schema.exclusiveMaximum}` };\n        }\n        if (IsDefined(schema.minimum) && !(value >= schema.minimum)) {\n            yield { type: ValueErrorType.IntegerMinimum, schema, path, value, message: `Expected integer to be greater or equal to ${schema.minimum}` };\n        }\n        if (IsDefined(schema.maximum) && !(value <= schema.maximum)) {\n            yield { type: ValueErrorType.IntegerMaximum, schema, path, value, message: `Expected integer to be less or equal to ${schema.maximum}` };\n        }\n    }\n    function* Intersect(schema, references, path, value) {\n        for (const subschema of schema.allOf) {\n            const next = Visit(subschema, references, path, value).next();\n            if (!next.done) {\n                yield next.value;\n                yield { type: ValueErrorType.Intersect, schema, path, value, message: `Expected all sub schemas to be valid` };\n                return;\n            }\n        }\n        if (schema.unevaluatedProperties === false) {\n            const schemaKeys = Types.KeyResolver.Resolve(schema);\n            const valueKeys = globalThis.Object.getOwnPropertyNames(value);\n            for (const valueKey of valueKeys) {\n                if (!schemaKeys.includes(valueKey)) {\n                    yield { type: ValueErrorType.IntersectUnevaluatedProperties, schema, path: `${path}/${valueKey}`, value, message: `Unexpected property` };\n                }\n            }\n        }\n        if (typeof schema.unevaluatedProperties === 'object') {\n            const schemaKeys = Types.KeyResolver.Resolve(schema);\n            const valueKeys = globalThis.Object.getOwnPropertyNames(value);\n            for (const valueKey of valueKeys) {\n                if (!schemaKeys.includes(valueKey)) {\n                    const next = Visit(schema.unevaluatedProperties, references, `${path}/${valueKey}`, value[valueKey]).next();\n                    if (!next.done) {\n                        yield next.value;\n                        yield { type: ValueErrorType.IntersectUnevaluatedProperties, schema, path: `${path}/${valueKey}`, value, message: `Invalid additional property` };\n                        return;\n                    }\n                }\n            }\n        }\n    }\n    function* Literal(schema, references, path, value) {\n        if (!(value === schema.const)) {\n            const error = typeof schema.const === 'string' ? `'${schema.const}'` : schema.const;\n            return yield { type: ValueErrorType.Literal, schema, path, value, message: `Expected ${error}` };\n        }\n    }\n    function* Never(schema, references, path, value) {\n        yield { type: ValueErrorType.Never, schema, path, value, message: `Value cannot be validated` };\n    }\n    function* Not(schema, references, path, value) {\n        if (Visit(schema.allOf[0].not, references, path, value).next().done === true) {\n            yield { type: ValueErrorType.Not, schema, path, value, message: `Value should not validate` };\n        }\n        yield* Visit(schema.allOf[1], references, path, value);\n    }\n    function* Null(schema, references, path, value) {\n        if (!(value === null)) {\n            return yield { type: ValueErrorType.Null, schema, path, value, message: `Expected null` };\n        }\n    }\n    function* Number(schema, references, path, value) {\n        if (!IsNumber(value)) {\n            return yield { type: ValueErrorType.Number, schema, path, value, message: `Expected number` };\n        }\n        if (IsDefined(schema.multipleOf) && !(value % schema.multipleOf === 0)) {\n            yield { type: ValueErrorType.NumberMultipleOf, schema, path, value, message: `Expected number to be a multiple of ${schema.multipleOf}` };\n        }\n        if (IsDefined(schema.exclusiveMinimum) && !(value > schema.exclusiveMinimum)) {\n            yield { type: ValueErrorType.NumberExclusiveMinimum, schema, path, value, message: `Expected number to be greater than ${schema.exclusiveMinimum}` };\n        }\n        if (IsDefined(schema.exclusiveMaximum) && !(value < schema.exclusiveMaximum)) {\n            yield { type: ValueErrorType.NumberExclusiveMaximum, schema, path, value, message: `Expected number to be less than ${schema.exclusiveMaximum}` };\n        }\n        if (IsDefined(schema.minimum) && !(value >= schema.minimum)) {\n            yield { type: ValueErrorType.NumberMaximum, schema, path, value, message: `Expected number to be greater or equal to ${schema.minimum}` };\n        }\n        if (IsDefined(schema.maximum) && !(value <= schema.maximum)) {\n            yield { type: ValueErrorType.NumberMinumum, schema, path, value, message: `Expected number to be less or equal to ${schema.maximum}` };\n        }\n    }\n    function* Object(schema, references, path, value) {\n        if (!IsObject(value)) {\n            return yield { type: ValueErrorType.Object, schema, path, value, message: `Expected object` };\n        }\n        if (IsDefined(schema.minProperties) && !(globalThis.Object.getOwnPropertyNames(value).length >= schema.minProperties)) {\n            yield { type: ValueErrorType.ObjectMinProperties, schema, path, value, message: `Expected object to have at least ${schema.minProperties} properties` };\n        }\n        if (IsDefined(schema.maxProperties) && !(globalThis.Object.getOwnPropertyNames(value).length <= schema.maxProperties)) {\n            yield { type: ValueErrorType.ObjectMaxProperties, schema, path, value, message: `Expected object to have less than ${schema.minProperties} properties` };\n        }\n        const requiredKeys = globalThis.Array.isArray(schema.required) ? schema.required : [];\n        const knownKeys = globalThis.Object.getOwnPropertyNames(schema.properties);\n        const unknownKeys = globalThis.Object.getOwnPropertyNames(value);\n        for (const knownKey of knownKeys) {\n            const property = schema.properties[knownKey];\n            if (schema.required && schema.required.includes(knownKey)) {\n                yield* Visit(property, references, `${path}/${knownKey}`, value[knownKey]);\n                if (Types.ExtendsUndefined.Check(schema) && !(knownKey in value)) {\n                    yield { type: ValueErrorType.ObjectRequiredProperties, schema: property, path: `${path}/${knownKey}`, value: undefined, message: `Expected required property` };\n                }\n            }\n            else {\n                if (IsExactOptionalProperty(value, knownKey)) {\n                    yield* Visit(property, references, `${path}/${knownKey}`, value[knownKey]);\n                }\n            }\n        }\n        for (const requiredKey of requiredKeys) {\n            if (unknownKeys.includes(requiredKey))\n                continue;\n            yield { type: ValueErrorType.ObjectRequiredProperties, schema: schema.properties[requiredKey], path: `${path}/${requiredKey}`, value: undefined, message: `Expected required property` };\n        }\n        if (schema.additionalProperties === false) {\n            for (const valueKey of unknownKeys) {\n                if (!knownKeys.includes(valueKey)) {\n                    yield { type: ValueErrorType.ObjectAdditionalProperties, schema, path: `${path}/${valueKey}`, value: value[valueKey], message: `Unexpected property` };\n                }\n            }\n        }\n        if (typeof schema.additionalProperties === 'object') {\n            for (const valueKey of unknownKeys) {\n                if (knownKeys.includes(valueKey))\n                    continue;\n                yield* Visit(schema.additionalProperties, references, `${path}/${valueKey}`, value[valueKey]);\n            }\n        }\n    }\n    function* Promise(schema, references, path, value) {\n        if (!(typeof value === 'object' && typeof value.then === 'function')) {\n            yield { type: ValueErrorType.Promise, schema, path, value, message: `Expected Promise` };\n        }\n    }\n    function* Record(schema, references, path, value) {\n        if (!IsRecordObject(value)) {\n            return yield { type: ValueErrorType.Object, schema, path, value, message: `Expected record object` };\n        }\n        if (IsDefined(schema.minProperties) && !(globalThis.Object.getOwnPropertyNames(value).length >= schema.minProperties)) {\n            yield { type: ValueErrorType.ObjectMinProperties, schema, path, value, message: `Expected object to have at least ${schema.minProperties} properties` };\n        }\n        if (IsDefined(schema.maxProperties) && !(globalThis.Object.getOwnPropertyNames(value).length <= schema.maxProperties)) {\n            yield { type: ValueErrorType.ObjectMaxProperties, schema, path, value, message: `Expected object to have less than ${schema.minProperties} properties` };\n        }\n        const [keyPattern, valueSchema] = globalThis.Object.entries(schema.patternProperties)[0];\n        const regex = new RegExp(keyPattern);\n        if (!globalThis.Object.getOwnPropertyNames(value).every((key) => regex.test(key))) {\n            const numeric = keyPattern === Types.PatternNumberExact;\n            const type = numeric ? ValueErrorType.RecordKeyNumeric : ValueErrorType.RecordKeyString;\n            const message = numeric ? 'Expected all object property keys to be numeric' : 'Expected all object property keys to be strings';\n            return yield { type, schema, path, value, message };\n        }\n        for (const [propKey, propValue] of globalThis.Object.entries(value)) {\n            yield* Visit(valueSchema, references, `${path}/${propKey}`, propValue);\n        }\n    }\n    function* Ref(schema, references, path, value) {\n        const index = references.findIndex((foreign) => foreign.$id === schema.$ref);\n        if (index === -1)\n            throw new ValueErrorsDereferenceError(schema);\n        const target = references[index];\n        yield* Visit(target, references, path, value);\n    }\n    function* String(schema, references, path, value) {\n        if (!IsString(value)) {\n            return yield { type: ValueErrorType.String, schema, path, value, message: 'Expected string' };\n        }\n        if (IsDefined(schema.minLength) && !(value.length >= schema.minLength)) {\n            yield { type: ValueErrorType.StringMinLength, schema, path, value, message: `Expected string length greater or equal to ${schema.minLength}` };\n        }\n        if (IsDefined(schema.maxLength) && !(value.length <= schema.maxLength)) {\n            yield { type: ValueErrorType.StringMaxLength, schema, path, value, message: `Expected string length less or equal to ${schema.maxLength}` };\n        }\n        if (schema.pattern !== undefined) {\n            const regex = new RegExp(schema.pattern);\n            if (!regex.test(value)) {\n                yield { type: ValueErrorType.StringPattern, schema, path, value, message: `Expected string to match pattern ${schema.pattern}` };\n            }\n        }\n        if (schema.format !== undefined) {\n            if (!Types.FormatRegistry.Has(schema.format)) {\n                yield { type: ValueErrorType.StringFormatUnknown, schema, path, value, message: `Unknown string format '${schema.format}'` };\n            }\n            else {\n                const format = Types.FormatRegistry.Get(schema.format);\n                if (!format(value)) {\n                    yield { type: ValueErrorType.StringFormat, schema, path, value, message: `Expected string to match format '${schema.format}'` };\n                }\n            }\n        }\n    }\n    function* Symbol(schema, references, path, value) {\n        if (!(typeof value === 'symbol')) {\n            return yield { type: ValueErrorType.Symbol, schema, path, value, message: 'Expected symbol' };\n        }\n    }\n    function* TemplateLiteral(schema, references, path, value) {\n        if (!IsString(value)) {\n            return yield { type: ValueErrorType.String, schema, path, value, message: 'Expected string' };\n        }\n        const regex = new RegExp(schema.pattern);\n        if (!regex.test(value)) {\n            yield { type: ValueErrorType.StringPattern, schema, path, value, message: `Expected string to match pattern ${schema.pattern}` };\n        }\n    }\n    function* This(schema, references, path, value) {\n        const index = references.findIndex((foreign) => foreign.$id === schema.$ref);\n        if (index === -1)\n            throw new ValueErrorsDereferenceError(schema);\n        const target = references[index];\n        yield* Visit(target, references, path, value);\n    }\n    function* Tuple(schema, references, path, value) {\n        if (!globalThis.Array.isArray(value)) {\n            return yield { type: ValueErrorType.Array, schema, path, value, message: 'Expected Array' };\n        }\n        if (schema.items === undefined && !(value.length === 0)) {\n            return yield { type: ValueErrorType.TupleZeroLength, schema, path, value, message: 'Expected tuple to have 0 elements' };\n        }\n        if (!(value.length === schema.maxItems)) {\n            yield { type: ValueErrorType.TupleLength, schema, path, value, message: `Expected tuple to have ${schema.maxItems} elements` };\n        }\n        if (!schema.items) {\n            return;\n        }\n        for (let i = 0; i < schema.items.length; i++) {\n            yield* Visit(schema.items[i], references, `${path}/${i}`, value[i]);\n        }\n    }\n    function* Undefined(schema, references, path, value) {\n        if (!(value === undefined)) {\n            yield { type: ValueErrorType.Undefined, schema, path, value, message: `Expected undefined` };\n        }\n    }\n    function* Union(schema, references, path, value) {\n        const errors = [];\n        for (const inner of schema.anyOf) {\n            const variantErrors = [...Visit(inner, references, path, value)];\n            if (variantErrors.length === 0)\n                return;\n            errors.push(...variantErrors);\n        }\n        if (errors.length > 0) {\n            yield { type: ValueErrorType.Union, schema, path, value, message: 'Expected value of union' };\n        }\n        for (const error of errors) {\n            yield error;\n        }\n    }\n    function* Uint8Array(schema, references, path, value) {\n        if (!(value instanceof globalThis.Uint8Array)) {\n            return yield { type: ValueErrorType.Uint8Array, schema, path, value, message: `Expected Uint8Array` };\n        }\n        if (IsDefined(schema.maxByteLength) && !(value.length <= schema.maxByteLength)) {\n            yield { type: ValueErrorType.Uint8ArrayMaxByteLength, schema, path, value, message: `Expected Uint8Array to have a byte length less or equal to ${schema.maxByteLength}` };\n        }\n        if (IsDefined(schema.minByteLength) && !(value.length >= schema.minByteLength)) {\n            yield { type: ValueErrorType.Uint8ArrayMinByteLength, schema, path, value, message: `Expected Uint8Array to have a byte length greater or equal to ${schema.maxByteLength}` };\n        }\n    }\n    function* Unknown(schema, references, path, value) { }\n    function* Void(schema, references, path, value) {\n        if (!IsVoid(value)) {\n            return yield { type: ValueErrorType.Void, schema, path, value, message: `Expected void` };\n        }\n    }\n    function* UserDefined(schema, references, path, value) {\n        const check = Types.TypeRegistry.Get(schema[Types.Kind]);\n        if (!check(schema, value)) {\n            return yield { type: ValueErrorType.Custom, schema, path, value, message: `Expected kind ${schema[Types.Kind]}` };\n        }\n    }\n    function* Visit(schema, references, path, value) {\n        const references_ = IsDefined(schema.$id) ? [...references, schema] : references;\n        const schema_ = schema;\n        switch (schema_[Types.Kind]) {\n            case 'Any':\n                return yield* Any(schema_, references_, path, value);\n            case 'Array':\n                return yield* Array(schema_, references_, path, value);\n            case 'BigInt':\n                return yield* BigInt(schema_, references_, path, value);\n            case 'Boolean':\n                return yield* Boolean(schema_, references_, path, value);\n            case 'Constructor':\n                return yield* Constructor(schema_, references_, path, value);\n            case 'Date':\n                return yield* Date(schema_, references_, path, value);\n            case 'Function':\n                return yield* Function(schema_, references_, path, value);\n            case 'Integer':\n                return yield* Integer(schema_, references_, path, value);\n            case 'Intersect':\n                return yield* Intersect(schema_, references_, path, value);\n            case 'Literal':\n                return yield* Literal(schema_, references_, path, value);\n            case 'Never':\n                return yield* Never(schema_, references_, path, value);\n            case 'Not':\n                return yield* Not(schema_, references_, path, value);\n            case 'Null':\n                return yield* Null(schema_, references_, path, value);\n            case 'Number':\n                return yield* Number(schema_, references_, path, value);\n            case 'Object':\n                return yield* Object(schema_, references_, path, value);\n            case 'Promise':\n                return yield* Promise(schema_, references_, path, value);\n            case 'Record':\n                return yield* Record(schema_, references_, path, value);\n            case 'Ref':\n                return yield* Ref(schema_, references_, path, value);\n            case 'String':\n                return yield* String(schema_, references_, path, value);\n            case 'Symbol':\n                return yield* Symbol(schema_, references_, path, value);\n            case 'TemplateLiteral':\n                return yield* TemplateLiteral(schema_, references_, path, value);\n            case 'This':\n                return yield* This(schema_, references_, path, value);\n            case 'Tuple':\n                return yield* Tuple(schema_, references_, path, value);\n            case 'Undefined':\n                return yield* Undefined(schema_, references_, path, value);\n            case 'Union':\n                return yield* Union(schema_, references_, path, value);\n            case 'Uint8Array':\n                return yield* Uint8Array(schema_, references_, path, value);\n            case 'Unknown':\n                return yield* Unknown(schema_, references_, path, value);\n            case 'Void':\n                return yield* Void(schema_, references_, path, value);\n            default:\n                if (!Types.TypeRegistry.Has(schema_[Types.Kind]))\n                    throw new ValueErrorsUnknownTypeError(schema);\n                return yield* UserDefined(schema_, references_, path, value);\n        }\n    }\n    function Errors(schema, references, value) {\n        const iterator = Visit(schema, references, '', value);\n        return new ValueErrorIterator(iterator);\n    }\n    ValueErrors.Errors = Errors;\n})(ValueErrors = exports.ValueErrors || (exports.ValueErrors = {}));\n", "\"use strict\";\n/*--------------------------------------------------------------------------\n\n@sinclair/typebox/errors\n\nThe MIT License (MIT)\n\nCopyright (c) 2017-2023 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./errors\"), exports);\n", "\"use strict\";\n/*--------------------------------------------------------------------------\n\n@sinclair/typebox/compiler\n\nThe MIT License (MIT)\n\nCopyright (c) 2017-2023 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TypeCompiler = exports.TypeCompilerTypeGuardError = exports.TypeCompilerDereferenceError = exports.TypeCompilerUnknownTypeError = exports.TypeCheck = void 0;\nconst Types = require(\"../typebox\");\nconst index_1 = require(\"../errors/index\");\nconst index_2 = require(\"../system/index\");\nconst hash_1 = require(\"../value/hash\");\n// -------------------------------------------------------------------\n// TypeCheck\n// -------------------------------------------------------------------\nclass TypeCheck {\n    constructor(schema, references, checkFunc, code) {\n        this.schema = schema;\n        this.references = references;\n        this.checkFunc = checkFunc;\n        this.code = code;\n    }\n    /** Returns the generated assertion code used to validate this type. */\n    Code() {\n        return this.code;\n    }\n    /** Returns an iterator for each error in this value. */\n    Errors(value) {\n        return index_1.ValueErrors.Errors(this.schema, this.references, value);\n    }\n    /** Returns true if the value matches the compiled type. */\n    Check(value) {\n        return this.checkFunc(value);\n    }\n}\nexports.TypeCheck = TypeCheck;\n// -------------------------------------------------------------------\n// Character\n// -------------------------------------------------------------------\nvar Character;\n(function (Character) {\n    function DollarSign(code) {\n        return code === 36;\n    }\n    Character.DollarSign = DollarSign;\n    function IsUnderscore(code) {\n        return code === 95;\n    }\n    Character.IsUnderscore = IsUnderscore;\n    function IsAlpha(code) {\n        return (code >= 65 && code <= 90) || (code >= 97 && code <= 122);\n    }\n    Character.IsAlpha = IsAlpha;\n    function IsNumeric(code) {\n        return code >= 48 && code <= 57;\n    }\n    Character.IsNumeric = IsNumeric;\n})(Character || (Character = {}));\n// -------------------------------------------------------------------\n// MemberExpression\n// -------------------------------------------------------------------\nvar MemberExpression;\n(function (MemberExpression) {\n    function IsFirstCharacterNumeric(value) {\n        if (value.length === 0)\n            return false;\n        return Character.IsNumeric(value.charCodeAt(0));\n    }\n    function IsAccessor(value) {\n        if (IsFirstCharacterNumeric(value))\n            return false;\n        for (let i = 0; i < value.length; i++) {\n            const code = value.charCodeAt(i);\n            const check = Character.IsAlpha(code) || Character.IsNumeric(code) || Character.DollarSign(code) || Character.IsUnderscore(code);\n            if (!check)\n                return false;\n        }\n        return true;\n    }\n    function EscapeHyphen(key) {\n        return key.replace(/'/g, \"\\\\'\");\n    }\n    function Encode(object, key) {\n        return IsAccessor(key) ? `${object}.${key}` : `${object}['${EscapeHyphen(key)}']`;\n    }\n    MemberExpression.Encode = Encode;\n})(MemberExpression || (MemberExpression = {}));\n// -------------------------------------------------------------------\n// Identifier\n// -------------------------------------------------------------------\nvar Identifier;\n(function (Identifier) {\n    function Encode($id) {\n        const buffer = [];\n        for (let i = 0; i < $id.length; i++) {\n            const code = $id.charCodeAt(i);\n            if (Character.IsNumeric(code) || Character.IsAlpha(code)) {\n                buffer.push($id.charAt(i));\n            }\n            else {\n                buffer.push(`_${code}_`);\n            }\n        }\n        return buffer.join('').replace(/__/g, '_');\n    }\n    Identifier.Encode = Encode;\n})(Identifier || (Identifier = {}));\n// -------------------------------------------------------------------\n// TypeCompiler\n// -------------------------------------------------------------------\nclass TypeCompilerUnknownTypeError extends Error {\n    constructor(schema) {\n        super('TypeCompiler: Unknown type');\n        this.schema = schema;\n    }\n}\nexports.TypeCompilerUnknownTypeError = TypeCompilerUnknownTypeError;\nclass TypeCompilerDereferenceError extends Error {\n    constructor(schema) {\n        super(`TypeCompiler: Unable to dereference schema with $id '${schema.$ref}'`);\n        this.schema = schema;\n    }\n}\nexports.TypeCompilerDereferenceError = TypeCompilerDereferenceError;\nclass TypeCompilerTypeGuardError extends Error {\n    constructor(schema) {\n        super('TypeCompiler: Preflight validation check failed to guard for the given schema');\n        this.schema = schema;\n    }\n}\nexports.TypeCompilerTypeGuardError = TypeCompilerTypeGuardError;\n/** Compiles Types for Runtime Type Checking */\nvar TypeCompiler;\n(function (TypeCompiler) {\n    // -------------------------------------------------------------------\n    // Guards\n    // -------------------------------------------------------------------\n    function IsBigInt(value) {\n        return typeof value === 'bigint';\n    }\n    function IsNumber(value) {\n        return typeof value === 'number' && globalThis.Number.isFinite(value);\n    }\n    function IsString(value) {\n        return typeof value === 'string';\n    }\n    // -------------------------------------------------------------------\n    // Polices\n    // -------------------------------------------------------------------\n    function IsExactOptionalProperty(value, key, expression) {\n        return index_2.TypeSystem.ExactOptionalPropertyTypes ? `('${key}' in ${value} ? ${expression} : true)` : `(${MemberExpression.Encode(value, key)} !== undefined ? ${expression} : true)`;\n    }\n    function IsObjectCheck(value) {\n        return !index_2.TypeSystem.AllowArrayObjects ? `(typeof ${value} === 'object' && ${value} !== null && !Array.isArray(${value}))` : `(typeof ${value} === 'object' && ${value} !== null)`;\n    }\n    function IsRecordCheck(value) {\n        return !index_2.TypeSystem.AllowArrayObjects\n            ? `(typeof ${value} === 'object' && ${value} !== null && !Array.isArray(${value}) && !(${value} instanceof Date) && !(${value} instanceof Uint8Array))`\n            : `(typeof ${value} === 'object' && ${value} !== null && !(${value} instanceof Date) && !(${value} instanceof Uint8Array))`;\n    }\n    function IsNumberCheck(value) {\n        return !index_2.TypeSystem.AllowNaN ? `(typeof ${value} === 'number' && Number.isFinite(${value}))` : `typeof ${value} === 'number'`;\n    }\n    function IsVoidCheck(value) {\n        return index_2.TypeSystem.AllowVoidNull ? `(${value} === undefined || ${value} === null)` : `${value} === undefined`;\n    }\n    // -------------------------------------------------------------------\n    // Types\n    // -------------------------------------------------------------------\n    function* Any(schema, references, value) {\n        yield 'true';\n    }\n    function* Array(schema, references, value) {\n        const expression = CreateExpression(schema.items, references, 'value');\n        yield `Array.isArray(${value}) && ${value}.every(value => ${expression})`;\n        if (IsNumber(schema.minItems))\n            yield `${value}.length >= ${schema.minItems}`;\n        if (IsNumber(schema.maxItems))\n            yield `${value}.length <= ${schema.maxItems}`;\n        if (schema.uniqueItems === true)\n            yield `((function() { const set = new Set(); for(const element of ${value}) { const hashed = hash(element); if(set.has(hashed)) { return false } else { set.add(hashed) } } return true })())`;\n    }\n    function* BigInt(schema, references, value) {\n        yield `(typeof ${value} === 'bigint')`;\n        if (IsBigInt(schema.multipleOf))\n            yield `(${value} % BigInt(${schema.multipleOf})) === 0`;\n        if (IsBigInt(schema.exclusiveMinimum))\n            yield `${value} > BigInt(${schema.exclusiveMinimum})`;\n        if (IsBigInt(schema.exclusiveMaximum))\n            yield `${value} < BigInt(${schema.exclusiveMaximum})`;\n        if (IsBigInt(schema.minimum))\n            yield `${value} >= BigInt(${schema.minimum})`;\n        if (IsBigInt(schema.maximum))\n            yield `${value} <= BigInt(${schema.maximum})`;\n    }\n    function* Boolean(schema, references, value) {\n        yield `typeof ${value} === 'boolean'`;\n    }\n    function* Constructor(schema, references, value) {\n        yield* Visit(schema.returns, references, `${value}.prototype`);\n    }\n    function* Date(schema, references, value) {\n        yield `(${value} instanceof Date) && Number.isFinite(${value}.getTime())`;\n        if (IsNumber(schema.exclusiveMinimumTimestamp))\n            yield `${value}.getTime() > ${schema.exclusiveMinimumTimestamp}`;\n        if (IsNumber(schema.exclusiveMaximumTimestamp))\n            yield `${value}.getTime() < ${schema.exclusiveMaximumTimestamp}`;\n        if (IsNumber(schema.minimumTimestamp))\n            yield `${value}.getTime() >= ${schema.minimumTimestamp}`;\n        if (IsNumber(schema.maximumTimestamp))\n            yield `${value}.getTime() <= ${schema.maximumTimestamp}`;\n    }\n    function* Function(schema, references, value) {\n        yield `typeof ${value} === 'function'`;\n    }\n    function* Integer(schema, references, value) {\n        yield `(typeof ${value} === 'number' && Number.isInteger(${value}))`;\n        if (IsNumber(schema.multipleOf))\n            yield `(${value} % ${schema.multipleOf}) === 0`;\n        if (IsNumber(schema.exclusiveMinimum))\n            yield `${value} > ${schema.exclusiveMinimum}`;\n        if (IsNumber(schema.exclusiveMaximum))\n            yield `${value} < ${schema.exclusiveMaximum}`;\n        if (IsNumber(schema.minimum))\n            yield `${value} >= ${schema.minimum}`;\n        if (IsNumber(schema.maximum))\n            yield `${value} <= ${schema.maximum}`;\n    }\n    function* Intersect(schema, references, value) {\n        if (schema.unevaluatedProperties === undefined) {\n            const expressions = schema.allOf.map((schema) => CreateExpression(schema, references, value));\n            yield `${expressions.join(' && ')}`;\n        }\n        else if (schema.unevaluatedProperties === false) {\n            // prettier-ignore\n            const schemaKeys = Types.KeyResolver.Resolve(schema).map((key) => `'${key}'`).join(', ');\n            const expressions = schema.allOf.map((schema) => CreateExpression(schema, references, value));\n            const expression1 = `Object.getOwnPropertyNames(${value}).every(key => [${schemaKeys}].includes(key))`;\n            yield `${expressions.join(' && ')} && ${expression1}`;\n        }\n        else if (typeof schema.unevaluatedProperties === 'object') {\n            // prettier-ignore\n            const schemaKeys = Types.KeyResolver.Resolve(schema).map((key) => `'${key}'`).join(', ');\n            const expressions = schema.allOf.map((schema) => CreateExpression(schema, references, value));\n            const expression1 = CreateExpression(schema.unevaluatedProperties, references, 'value[key]');\n            const expression2 = `Object.getOwnPropertyNames(${value}).every(key => [${schemaKeys}].includes(key) || ${expression1})`;\n            yield `${expressions.join(' && ')} && ${expression2}`;\n        }\n    }\n    function* Literal(schema, references, value) {\n        if (typeof schema.const === 'number' || typeof schema.const === 'boolean') {\n            yield `${value} === ${schema.const}`;\n        }\n        else {\n            yield `${value} === '${schema.const}'`;\n        }\n    }\n    function* Never(schema, references, value) {\n        yield `false`;\n    }\n    function* Not(schema, references, value) {\n        const left = CreateExpression(schema.allOf[0].not, references, value);\n        const right = CreateExpression(schema.allOf[1], references, value);\n        yield `!${left} && ${right}`;\n    }\n    function* Null(schema, references, value) {\n        yield `${value} === null`;\n    }\n    function* Number(schema, references, value) {\n        yield IsNumberCheck(value);\n        if (IsNumber(schema.multipleOf))\n            yield `(${value} % ${schema.multipleOf}) === 0`;\n        if (IsNumber(schema.exclusiveMinimum))\n            yield `${value} > ${schema.exclusiveMinimum}`;\n        if (IsNumber(schema.exclusiveMaximum))\n            yield `${value} < ${schema.exclusiveMaximum}`;\n        if (IsNumber(schema.minimum))\n            yield `${value} >= ${schema.minimum}`;\n        if (IsNumber(schema.maximum))\n            yield `${value} <= ${schema.maximum}`;\n    }\n    function* Object(schema, references, value) {\n        yield IsObjectCheck(value);\n        if (IsNumber(schema.minProperties))\n            yield `Object.getOwnPropertyNames(${value}).length >= ${schema.minProperties}`;\n        if (IsNumber(schema.maxProperties))\n            yield `Object.getOwnPropertyNames(${value}).length <= ${schema.maxProperties}`;\n        const knownKeys = globalThis.Object.getOwnPropertyNames(schema.properties);\n        for (const knownKey of knownKeys) {\n            const memberExpression = MemberExpression.Encode(value, knownKey);\n            const property = schema.properties[knownKey];\n            if (schema.required && schema.required.includes(knownKey)) {\n                yield* Visit(property, references, memberExpression);\n                if (Types.ExtendsUndefined.Check(property))\n                    yield `('${knownKey}' in ${value})`;\n            }\n            else {\n                const expression = CreateExpression(property, references, memberExpression);\n                yield IsExactOptionalProperty(value, knownKey, expression);\n            }\n        }\n        if (schema.additionalProperties === false) {\n            if (schema.required && schema.required.length === knownKeys.length) {\n                yield `Object.getOwnPropertyNames(${value}).length === ${knownKeys.length}`;\n            }\n            else {\n                const keys = `[${knownKeys.map((key) => `'${key}'`).join(', ')}]`;\n                yield `Object.getOwnPropertyNames(${value}).every(key => ${keys}.includes(key))`;\n            }\n        }\n        if (typeof schema.additionalProperties === 'object') {\n            const expression = CreateExpression(schema.additionalProperties, references, 'value[key]');\n            const keys = `[${knownKeys.map((key) => `'${key}'`).join(', ')}]`;\n            yield `(Object.getOwnPropertyNames(${value}).every(key => ${keys}.includes(key) || ${expression}))`;\n        }\n    }\n    function* Promise(schema, references, value) {\n        yield `(typeof value === 'object' && typeof ${value}.then === 'function')`;\n    }\n    function* Record(schema, references, value) {\n        yield IsRecordCheck(value);\n        if (IsNumber(schema.minProperties))\n            yield `Object.getOwnPropertyNames(${value}).length >= ${schema.minProperties}`;\n        if (IsNumber(schema.maxProperties))\n            yield `Object.getOwnPropertyNames(${value}).length <= ${schema.maxProperties}`;\n        const [keyPattern, valueSchema] = globalThis.Object.entries(schema.patternProperties)[0];\n        const local = PushLocal(`new RegExp(/${keyPattern}/)`);\n        yield `(Object.getOwnPropertyNames(${value}).every(key => ${local}.test(key)))`;\n        const expression = CreateExpression(valueSchema, references, 'value');\n        yield `Object.values(${value}).every(value => ${expression})`;\n    }\n    function* Ref(schema, references, value) {\n        const index = references.findIndex((foreign) => foreign.$id === schema.$ref);\n        if (index === -1)\n            throw new TypeCompilerDereferenceError(schema);\n        const target = references[index];\n        // Reference: If we have seen this reference before we can just yield and return\n        // the function call. If this isn't the case we defer to visit to generate and\n        // set the function for subsequent passes. Consider for refactor.\n        if (state_local_function_names.has(schema.$ref))\n            return yield `${CreateFunctionName(schema.$ref)}(${value})`;\n        yield* Visit(target, references, value);\n    }\n    function* String(schema, references, value) {\n        yield `(typeof ${value} === 'string')`;\n        if (IsNumber(schema.minLength))\n            yield `${value}.length >= ${schema.minLength}`;\n        if (IsNumber(schema.maxLength))\n            yield `${value}.length <= ${schema.maxLength}`;\n        if (schema.pattern !== undefined) {\n            const local = PushLocal(`${new RegExp(schema.pattern)};`);\n            yield `${local}.test(${value})`;\n        }\n        if (schema.format !== undefined) {\n            yield `format('${schema.format}', ${value})`;\n        }\n    }\n    function* Symbol(schema, references, value) {\n        yield `(typeof ${value} === 'symbol')`;\n    }\n    function* TemplateLiteral(schema, references, value) {\n        yield `(typeof ${value} === 'string')`;\n        const local = PushLocal(`${new RegExp(schema.pattern)};`);\n        yield `${local}.test(${value})`;\n    }\n    function* This(schema, references, value) {\n        const func = CreateFunctionName(schema.$ref);\n        yield `${func}(${value})`;\n    }\n    function* Tuple(schema, references, value) {\n        yield `(Array.isArray(${value}))`;\n        if (schema.items === undefined)\n            return yield `${value}.length === 0`;\n        yield `(${value}.length === ${schema.maxItems})`;\n        for (let i = 0; i < schema.items.length; i++) {\n            const expression = CreateExpression(schema.items[i], references, `${value}[${i}]`);\n            yield `${expression}`;\n        }\n    }\n    function* Undefined(schema, references, value) {\n        yield `${value} === undefined`;\n    }\n    function* Union(schema, references, value) {\n        const expressions = schema.anyOf.map((schema) => CreateExpression(schema, references, value));\n        yield `(${expressions.join(' || ')})`;\n    }\n    function* Uint8Array(schema, references, value) {\n        yield `${value} instanceof Uint8Array`;\n        if (IsNumber(schema.maxByteLength))\n            yield `(${value}.length <= ${schema.maxByteLength})`;\n        if (IsNumber(schema.minByteLength))\n            yield `(${value}.length >= ${schema.minByteLength})`;\n    }\n    function* Unknown(schema, references, value) {\n        yield 'true';\n    }\n    function* Void(schema, references, value) {\n        yield IsVoidCheck(value);\n    }\n    function* UserDefined(schema, references, value) {\n        const schema_key = `schema_key_${state_remote_custom_types.size}`;\n        state_remote_custom_types.set(schema_key, schema);\n        yield `custom('${schema[Types.Kind]}', '${schema_key}', ${value})`;\n    }\n    function* Visit(schema, references, value) {\n        const references_ = IsString(schema.$id) ? [...references, schema] : references;\n        const schema_ = schema;\n        // Reference: Referenced schemas can originate from either additional schemas\n        // or inline in the schema itself. Ideally the recursive path should align to\n        // reference path. Consider for refactor.\n        if (IsString(schema.$id) && !state_local_function_names.has(schema.$id)) {\n            state_local_function_names.add(schema.$id);\n            const name = CreateFunctionName(schema.$id);\n            const body = CreateFunction(name, schema, references, 'value');\n            PushFunction(body);\n            yield `${name}(${value})`;\n            return;\n        }\n        switch (schema_[Types.Kind]) {\n            case 'Any':\n                return yield* Any(schema_, references_, value);\n            case 'Array':\n                return yield* Array(schema_, references_, value);\n            case 'BigInt':\n                return yield* BigInt(schema_, references_, value);\n            case 'Boolean':\n                return yield* Boolean(schema_, references_, value);\n            case 'Constructor':\n                return yield* Constructor(schema_, references_, value);\n            case 'Date':\n                return yield* Date(schema_, references_, value);\n            case 'Function':\n                return yield* Function(schema_, references_, value);\n            case 'Integer':\n                return yield* Integer(schema_, references_, value);\n            case 'Intersect':\n                return yield* Intersect(schema_, references_, value);\n            case 'Literal':\n                return yield* Literal(schema_, references_, value);\n            case 'Never':\n                return yield* Never(schema_, references_, value);\n            case 'Not':\n                return yield* Not(schema_, references_, value);\n            case 'Null':\n                return yield* Null(schema_, references_, value);\n            case 'Number':\n                return yield* Number(schema_, references_, value);\n            case 'Object':\n                return yield* Object(schema_, references_, value);\n            case 'Promise':\n                return yield* Promise(schema_, references_, value);\n            case 'Record':\n                return yield* Record(schema_, references_, value);\n            case 'Ref':\n                return yield* Ref(schema_, references_, value);\n            case 'String':\n                return yield* String(schema_, references_, value);\n            case 'Symbol':\n                return yield* Symbol(schema_, references_, value);\n            case 'TemplateLiteral':\n                return yield* TemplateLiteral(schema_, references_, value);\n            case 'This':\n                return yield* This(schema_, references_, value);\n            case 'Tuple':\n                return yield* Tuple(schema_, references_, value);\n            case 'Undefined':\n                return yield* Undefined(schema_, references_, value);\n            case 'Union':\n                return yield* Union(schema_, references_, value);\n            case 'Uint8Array':\n                return yield* Uint8Array(schema_, references_, value);\n            case 'Unknown':\n                return yield* Unknown(schema_, references_, value);\n            case 'Void':\n                return yield* Void(schema_, references_, value);\n            default:\n                if (!Types.TypeRegistry.Has(schema_[Types.Kind]))\n                    throw new TypeCompilerUnknownTypeError(schema);\n                return yield* UserDefined(schema_, references_, value);\n        }\n    }\n    // -------------------------------------------------------------------\n    // Compiler State\n    // -------------------------------------------------------------------\n    const state_local_variables = new Set(); // local variables and functions\n    const state_local_function_names = new Set(); // local function names used call ref validators\n    const state_remote_custom_types = new Map(); // remote custom types used during compilation\n    function ResetCompiler() {\n        state_local_variables.clear();\n        state_local_function_names.clear();\n        state_remote_custom_types.clear();\n    }\n    function CreateExpression(schema, references, value) {\n        return `(${[...Visit(schema, references, value)].join(' && ')})`;\n    }\n    function CreateFunctionName($id) {\n        return `check_${Identifier.Encode($id)}`;\n    }\n    function CreateFunction(name, schema, references, value) {\n        const expression = [...Visit(schema, references, value)].map((condition) => `    ${condition}`).join(' &&\\n');\n        return `function ${name}(value) {\\n  return (\\n${expression}\\n )\\n}`;\n    }\n    function PushFunction(functionBody) {\n        state_local_variables.add(functionBody);\n    }\n    function PushLocal(expression) {\n        const local = `local_${state_local_variables.size}`;\n        state_local_variables.add(`const ${local} = ${expression}`);\n        return local;\n    }\n    function GetLocals() {\n        return [...state_local_variables.values()];\n    }\n    // -------------------------------------------------------------------\n    // Compile\n    // -------------------------------------------------------------------\n    function Build(schema, references) {\n        ResetCompiler();\n        const check = CreateFunction('check', schema, references, 'value');\n        const locals = GetLocals();\n        return `${locals.join('\\n')}\\nreturn ${check}`;\n    }\n    /** Returns the generated assertion code used to validate this type. */\n    function Code(schema, references = []) {\n        if (!Types.TypeGuard.TSchema(schema))\n            throw new TypeCompilerTypeGuardError(schema);\n        for (const schema of references)\n            if (!Types.TypeGuard.TSchema(schema))\n                throw new TypeCompilerTypeGuardError(schema);\n        return Build(schema, references);\n    }\n    TypeCompiler.Code = Code;\n    /** Compiles the given type for runtime type checking. This compiler only accepts known TypeBox types non-inclusive of unsafe types. */\n    function Compile(schema, references = []) {\n        const code = Code(schema, references);\n        const custom_schemas = new Map(state_remote_custom_types);\n        const compiledFunction = globalThis.Function('custom', 'format', 'hash', code);\n        const checkFunction = compiledFunction((kind, schema_key, value) => {\n            if (!Types.TypeRegistry.Has(kind) || !custom_schemas.has(schema_key))\n                return false;\n            const schema = custom_schemas.get(schema_key);\n            const func = Types.TypeRegistry.Get(kind);\n            return func(schema, value);\n        }, (format, value) => {\n            if (!Types.FormatRegistry.Has(format))\n                return false;\n            const func = Types.FormatRegistry.Get(format);\n            return func(value);\n        }, (value) => {\n            return hash_1.ValueHash.Create(value);\n        });\n        return new TypeCheck(schema, references, checkFunction, code);\n    }\n    TypeCompiler.Compile = Compile;\n})(TypeCompiler = exports.TypeCompiler || (exports.TypeCompiler = {}));\n", "\"use strict\";\n/*--------------------------------------------------------------------------\n\n@sinclair/typebox/compiler\n\nThe MIT License (MIT)\n\nCopyright (c) 2017-2023 Haydn Paterson (sinclair) <haydn.developer@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n---------------------------------------------------------------------------*/\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ValueErrorType = void 0;\nvar index_1 = require(\"../errors/index\");\nObject.defineProperty(exports, \"ValueErrorType\", { enumerable: true, get: function () { return index_1.ValueErrorType; } });\n__exportStar(require(\"./compiler\"), exports);\n"],
  "mappings": "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",
  "names": ["TypeSystem", "require_system", "exports", "ValueHash", "ByteMarker", "Object", "Symbol", "ValueErrorType", "ValueErrors", "Object", "Promise", "Symbol", "require_errors", "exports", "Character", "MemberExpression", "Identifier", "TypeCompiler", "schema", "Object", "Promise", "Symbol", "require_compiler", "exports"]
}
