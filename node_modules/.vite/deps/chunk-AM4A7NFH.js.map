{
  "version": 3,
  "sources": ["../../@gcornut/valibot-json-schema/dist/index.mjs"],
  "sourcesContent": ["// src/extension/withJSONSchemaFeatures.ts\nvar JSON_SCHEMA_FEATURES_KEY = \"__json_schema_features\";\nfunction withJSONSchemaFeatures(schema, features) {\n  return Object.assign(schema, { [JSON_SCHEMA_FEATURES_KEY]: features });\n}\nfunction getJSONSchemaFeatures(schema) {\n  return schema[JSON_SCHEMA_FEATURES_KEY];\n}\n\n// src/extension/assignExtraJSONSchemaFeatures.ts\nfunction assignExtraJSONSchemaFeatures(schema, converted) {\n  const jsonSchemaFeatures = getJSONSchemaFeatures(schema);\n  if (jsonSchemaFeatures) {\n    Object.assign(converted, jsonSchemaFeatures);\n  }\n}\n\n// src/utils/assert.ts\nfunction assert(value, predicate, message) {\n  if (!predicate(value))\n    throw new Error(message.replace(\"%\", String(value)));\n  return value;\n}\n\n// src/utils/json-schema.ts\nvar $schema = \"http://json-schema.org/draft-07/schema#\";\nfunction isJSONLiteral(value) {\n  return typeof value === \"number\" && !Number.isNaN(value) || typeof value === \"string\" || typeof value === \"boolean\" || value === null;\n}\nvar assertJSONLiteral = (v) => assert(v, isJSONLiteral, \"Unsupported literal value type: %\");\n\n// src/toJSONSchema/schemas.ts\nimport {\n  getDefault\n} from \"valibot\";\n\n// src/utils/isEqual.ts\nfunction isEqual(obj1, obj2) {\n  if (obj1 === obj2)\n    return true;\n  if (typeof obj1 === \"object\" && typeof obj2 === \"object\") {\n    const keys1 = Object.keys(obj1);\n    const keys2 = Object.keys(obj2);\n    if (keys1.length !== keys2.length)\n      return false;\n    return keys1.every((key1) => isEqual(obj1[key1], obj2[key1]));\n  }\n  return false;\n}\n\n// src/utils/valibot.ts\nvar isSchemaType = (type) => {\n  return (schema) => !!schema && schema.type === type;\n};\nvar isNullishSchema = isSchemaType(\"nullish\");\nvar isOptionalSchema = isSchemaType(\"optional\");\nvar isStringSchema = isSchemaType(\"string\");\nvar isNeverSchema = isSchemaType(\"never\");\n\n// src/toJSONSchema/toDefinitionURI.ts\nvar toDefinitionURI = (name) => `#/definitions/${name}`;\n\n// src/toJSONSchema/schemas.ts\nvar SCHEMA_CONVERTERS = {\n  any: () => ({}),\n  // Core types\n  null: () => ({ const: null }),\n  literal: ({ literal }) => ({ const: assertJSONLiteral(literal) }),\n  number: () => ({ type: \"number\" }),\n  string: () => ({ type: \"string\" }),\n  boolean: () => ({ type: \"boolean\" }),\n  // Compositions\n  optional: (schema, convert) => {\n    const output = convert(schema.wrapped);\n    const defaultValue = getDefault(schema);\n    if (defaultValue !== void 0)\n      output.default = defaultValue;\n    return output;\n  },\n  nullish: (schema, convert) => {\n    const output = { anyOf: [{ const: null }, convert(schema.wrapped)] };\n    const defaultValue = getDefault(schema);\n    if (defaultValue !== void 0)\n      output.default = defaultValue;\n    return output;\n  },\n  nullable: (schema, convert) => {\n    const output = { anyOf: [{ const: null }, convert(schema.wrapped)] };\n    const defaultValue = getDefault(schema);\n    if (defaultValue !== void 0)\n      output.default = defaultValue;\n    return output;\n  },\n  picklist: ({ options }) => ({ enum: options.map(assertJSONLiteral) }),\n  enum: (options) => ({ enum: Object.values(options.enum).map(assertJSONLiteral) }),\n  union: ({ options }, convert) => ({ anyOf: options.map(convert) }),\n  intersect: ({ options }, convert) => ({ allOf: options.map(convert) }),\n  // Complex types\n  array: ({ item }, convert) => ({ type: \"array\", items: convert(item) }),\n  tuple({ items: originalItems, rest, pipe }, convert) {\n    const minItems = originalItems.length;\n    let maxItems;\n    let items = originalItems.map(convert);\n    let additionalItems;\n    if (isNeverSchema(rest)) {\n      maxItems = minItems;\n    } else if (rest) {\n      const restItems = convert(rest);\n      if (items.length === 1 && isEqual(items[0], restItems)) {\n        items = items[0];\n      } else {\n        additionalItems = restItems;\n      }\n    }\n    return { type: \"array\", items, additionalItems, minItems, maxItems };\n  },\n  object({ entries, rest }, convert, context) {\n    const properties = {};\n    const required = [];\n    for (const [propKey, propValue] of Object.entries(entries)) {\n      const propSchema = propValue;\n      if (!isOptionalSchema(propSchema) && !isNullishSchema(propSchema)) {\n        required.push(propKey);\n      }\n      properties[propKey] = convert(propSchema);\n      assignExtraJSONSchemaFeatures(propValue, properties[propKey]);\n    }\n    let additionalProperties;\n    if (rest) {\n      additionalProperties = isNeverSchema(rest) ? false : convert(rest);\n    } else if (context.strictObjectTypes) {\n      additionalProperties = false;\n    }\n    const output = { type: \"object\", properties };\n    if (additionalProperties !== void 0)\n      output.additionalProperties = additionalProperties;\n    if (required.length)\n      output.required = required;\n    return output;\n  },\n  record({ key, value }, convert) {\n    assert(key, isStringSchema, \"Unsupported record key type: %\");\n    return { type: \"object\", additionalProperties: convert(value) };\n  },\n  lazy(schema, _, context) {\n    const nested = schema.getter();\n    const defName = context.defNameMap.get(nested);\n    if (!defName) {\n      throw new Error(\"Type inside lazy schema must be provided in the definitions\");\n    }\n    return { $ref: toDefinitionURI(defName) };\n  },\n  date(_, __, context) {\n    if (!context.dateStrategy) {\n      throw new Error('The \"dateStrategy\" option must be set to handle date validators');\n    }\n    switch (context.dateStrategy) {\n      case \"integer\":\n        return { type: \"integer\", format: \"unix-time\" };\n      case \"string\":\n        return { type: \"string\", format: \"date-time\" };\n    }\n  },\n  undefined(_, __, context) {\n    if (!context.undefinedStrategy) {\n      throw new Error('The \"undefinedStrategy\" option must be set to handle the `undefined` schema');\n    }\n    switch (context.undefinedStrategy) {\n      case \"any\":\n        return {};\n    }\n  },\n  bigint(_, __, context) {\n    if (!context.bigintStrategy) {\n      throw new Error('The \"bigintStrategy\" option must be set to handle `bigint` validators');\n    }\n    switch (context.bigintStrategy) {\n      case \"integer\":\n        return { type: \"integer\", format: \"int64\" };\n      case \"string\":\n        return { type: \"string\" };\n    }\n  },\n  variant({ options }, ...args) {\n    return SCHEMA_CONVERTERS.union({ options }, ...args);\n  }\n};\nSCHEMA_CONVERTERS[\"recursive\"] = SCHEMA_CONVERTERS[\"lazy\"];\n\n// src/toJSONSchema/validations.ts\nvar VALIDATION_BY_SCHEMA = {\n  array: {\n    length: ({ requirement }) => ({ minItems: requirement, maxItems: requirement }),\n    min_length: ({ requirement }) => ({ minItems: requirement }),\n    max_length: ({ requirement }) => ({ maxItems: requirement })\n  },\n  string: {\n    value: ({ requirement }) => ({ const: requirement }),\n    length: ({ requirement }) => ({ minLength: requirement, maxLength: requirement }),\n    min_length: ({ requirement }) => ({ minLength: requirement }),\n    max_length: ({ requirement }) => ({ maxLength: requirement }),\n    // TODO: validate RegExp features are compatible with json schema ?\n    regex: ({ requirement }) => ({ pattern: requirement.source }),\n    email: () => ({ format: \"email\" }),\n    iso_date: () => ({ format: \"date\" }),\n    iso_timestamp: () => ({ format: \"date-time\" }),\n    ipv4: () => ({ format: \"ipv4\" }),\n    ipv6: () => ({ format: \"ipv6\" }),\n    uuid: () => ({ format: \"uuid\" })\n  },\n  number: {\n    value: ({ requirement }) => ({ const: requirement }),\n    min_value: ({ requirement }) => ({ minimum: requirement }),\n    max_value: ({ requirement }) => ({ maximum: requirement }),\n    multiple_of: ({ requirement }) => ({ multipleOf: requirement }),\n    integer: () => ({ type: \"integer\" })\n  },\n  boolean: {\n    value: ({ requirement }) => ({ const: requirement })\n  }\n};\nfunction convertPipe(schemaType, ignoreUnknownValidation, pipe = []) {\n  return pipe.reduce((def, validation) => {\n    var _a;\n    const validationType = validation.type;\n    const validationConverter = (_a = VALIDATION_BY_SCHEMA[schemaType]) == null ? void 0 : _a[validationType];\n    if (!validationConverter && ignoreUnknownValidation)\n      return {};\n    assert(validationConverter, Boolean, `Unsupported valibot validation \\`${validationType}\\` for schema \\`${schemaType}\\``);\n    return Object.assign(def, validationConverter(validation));\n  }, {});\n}\n\n// src/toJSONSchema/index.ts\nfunction getDefNameMap(definitions = {}) {\n  const map = /* @__PURE__ */ new Map();\n  for (const [name, definition] of Object.entries(definitions)) {\n    map.set(definition, name);\n  }\n  return map;\n}\nfunction createConverter(context) {\n  const definitions = {};\n  function converter(schema) {\n    const defName = context.defNameMap.get(schema);\n    const defURI = defName && toDefinitionURI(defName);\n    if (defURI && defURI in definitions) {\n      return { $ref: defURI };\n    }\n    const schemaConverter = SCHEMA_CONVERTERS[schema.type];\n    assert(schemaConverter, Boolean, `Unsupported valibot schema: ${(schema == null ? void 0 : schema.type) || schema}`);\n    const converted = schemaConverter(schema, converter, context);\n    Object.assign(converted, convertPipe(schema.type, context.ignoreUnknownValidation, schema.pipe));\n    assignExtraJSONSchemaFeatures(schema, converted);\n    if (defURI) {\n      definitions[defName] = converted;\n      return { $ref: defURI };\n    }\n    return converted;\n  }\n  return { definitions, converter };\n}\nfunction toJSONSchema(options) {\n  const { schema, definitions: inputDefinitions, ...more } = options;\n  const defNameMap = getDefNameMap(inputDefinitions);\n  const { definitions, converter } = createConverter({ defNameMap, ...more });\n  if (!schema && !inputDefinitions) {\n    throw new Error(\"No main schema or definitions provided.\");\n  }\n  if (inputDefinitions) {\n    Object.values(inputDefinitions).forEach(converter);\n  }\n  const mainConverted = schema && converter(schema);\n  const mainDefName = schema && defNameMap.get(schema);\n  const out = { $schema };\n  if (mainDefName) {\n    out.$ref = toDefinitionURI(mainDefName);\n  } else {\n    Object.assign(out, mainConverted);\n  }\n  if (Object.keys(definitions).length) {\n    out.definitions = definitions;\n  }\n  return out;\n}\nexport {\n  toJSONSchema,\n  withJSONSchemaFeatures\n};\n"],
  "mappings": "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",
  "names": []
}
